[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"


[tool.poetry]
name = "lonboard_examples"
version = "0.0.0-dev"
description = "Placeholder for lonboard testing."
authors = ["Jordan Pinder <jordan.pinder.dev@gmail.com>"]
readme = "README.md"
license = "MIT"
repository = "https://github.com/jap546/lonboard_examples"

[tool.poetry.dependencies]
python = ">=3.10,<3.11.dev0"
pandas = ">=2.1.0"
geopandas = ">=1.0"
ipykernel = "^6.20.2"
matplotlib = "^3.8.0"
shapely = "^2.0.2"
arrow = "^1.3.0"
pyarrow = ">=15.0.2"
lonboard = "^0.9.3"
numpy = "<2"
overturemaps = "^0.8.0"
geopy = "^2.4.1"

[tool.poetry.group.dev.dependencies]
# runner
nox = "^2022.11.21"
# format
black = "^23.1.0"
isort = "^5.12.0"
# lint
ruff = ">=0.0.291"
# typecheck
mypy = "^1.0.1"
typing-extensions = "^4.5.0"
types-requests = "^2.28.11.13"
# test
pytest = "^7.2.1"
pytest-cov = "^4.0.0"
pytest-mock = "^3.10.0"
pygments = "^2.14.0"
# docs
sphinx = "^6.1.3"
sphinx-autodoc-typehints = "^1.22"
# env
python-dotenv = "^1.0.0"
types-toml = "^0.10.8.7"

[tool.ruff]
# Same as Black.
line-length = 88
# assume python 3.10
target-version = "py310"

select = [
    "A", # flake8-builtins (redefinition of bultins)
    "ANN", # flake8-annotations (type annotations are everywhere)
    "ARG", # flake8-unused-arguments (unused argument in function/method/class/lambda)
    "B", # flake8-bugbear (bugs & design problems)
    "B9", # flake8-bugbear strict (bugs & design problems)
    "BLE", # flake8-blind-except (no "except:" or "except Exception:")
    # "COM", # flake8-commas (force trailing commas) -> unelegant
    "C4", # flake8-comprehensions (better list/set/dict comprehensions)
    "C90", # McCabe (code complexity)
    "D", # pydocstyle (documentation style)
    "DJ", # flake8-django (practices on Django)
    "DTZ", # flake8-datetimez (usage of unsafe naive datetime class)
    "E", # pycodestyle (violation of PEP-8)
    "EM", # flake8-errmsg (format error messages)
    "EXE", # flake8-executable (executable permissions and shebangs)
    "ERA", # eradicate (no commented-out code)
    "F", # pyflakes (invalid Python code)
    "FBT", # flake8-boolean-trap (misusage of booleans in function declaration & calls)
    "G", # flake8-logging-format (logging format strings)
    "I", # isort (import order)
    "ICN", # flake8-import-conventions (how certain packages should be imported or aliased)
    # "INP", # flake8-no-pep420 (ban PEP-420 implicit namespace packages) -> long live implicit namespace packages!
    "INT", # flake8-gettext (f-string resolved before function calls)
    "ISC", # flake8-implicit-str-concat (string literal concatenation)
    "N", # pep8-naming (naming conventions)
    "NPY", # NumPy-specific rules (e.g. deprecated-type-alias and legacy-random)
    "PD", # pandas-vet (pandas code)
    "PIE", # flake8-pie (miscellaneous lints)
    "PGH", # pygrep-hooks (miscellaneous lints, e.g. "use specific rule codes when using noqa")
    "PL", # Pylint (static code analyser)
    "PT", # flake8-pytest-style (style issues or inconsistencies with pytest-based tests)
    "PTH", # flake8-use-pathlib (use of functions that can be replaced by pathlib module)
    "PYI", # flake8-pyi (provide specializations for type hinting stub files)
    "Q0", # flake8-quotes (avoid escaping quotes)
    "RSE", # flake8-raise (improvements for raise statements)
    "RET", # flake8-return (check return values)
    "RUF", # ruff-specific rules
    "S", # flake8-bandit (security)
    "SIM", # flake8-simplify (tips to simplify the code)
    "SLF", # flake8-self (private member access)
    "T10", # flake8-debugger
    "T20", # flake8-print (no print nor pprint)
    "TCH", # flake8-type-checking (move import only intended for type-checking in "if TYPE_CHECKING" blocs)
    "TID", # flake8-tidy-imports (ordonated imports)
    "TRY", # tryceratops (exception handling AntiPatterns)
    "UP", # pyupgrade (upgrate syntax for newer versions of Python)
    "YTT", # flake8-2020 (misuse of sys.version and sys.version_info)
    "W" # pycodestyle (violation of PEP-8)
]
ignore = [
    "ANN101", # missing type annotation for self, but hinting self all the time is useless
    "ANN102", # missing type annotation for cls but hinting cls all the time is useless
    "ANN401", # disallows Any, but some elements should be Any when they are external
    "B024", # forces abstract classes to have at least one abstract method, but sometimes a class is virtually abstract
    "D100", # Missing docstring in public module
    "D105", # docstrings on magic methods, useless docstrings are well known
    "E501", # line size, but bug-bear already set it with a tolerance of 10% (B950)
    "UP007" # ignore or-wise typing for py3.9 support
]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

[tool.ruff.pydocstyle]
convention = "google"